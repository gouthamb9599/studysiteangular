{"version":3,"file":"ng-chartjs.umd.js","sources":["ng://ng-chartjs/lib/store.service.ts","ng://ng-chartjs/lib/plugin-token.ts","ng://ng-chartjs/lib/plugins-config.ts","ng://ng-chartjs/lib/ng-chartjs.service.ts","ng://ng-chartjs/lib/colors.ts","ng://ng-chartjs/lib/ng-chartjs.directive.ts","ng://ng-chartjs/lib/ng-chartjs.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PluginConfig } from './plugins-config';\n\nexport const NgChartjsDefaultPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Default Plugin');\n\nexport const NgChartjsCustomPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Custom Plugin');\n","export class PluginConfig {\n    private _plugins: any[];\n    constructor(plugins: any[] = []) {\n        this._plugins = plugins;\n    }\n\n    get plugins() {\n        return this._plugins;\n    }\n}\n","import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    private plugins: any[];\n\n    constructor(@Inject(forwardRef(() => NgChartjsCustomPluginToken)) private pluginConfig: PluginConfig,\n    private storeService: StoreService) {\n      this.plugins = pluginConfig.plugins;\n      if (this.plugins.length !== 0 || this.plugins) {\n        for (let i = 0; i < this.plugins.length; i++) {\n          if (this.plugins[i]) {\n            Chart.plugins.register(this.plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [255, 152, 0],       // Orange\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [0, 150, 136],       // Teal\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nexport function rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nexport function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\n\nexport function formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nexport function formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\n","import { StoreService } from './store.service';\nimport {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive\n} from '@angular/core';\nimport { Chart } from 'chart.js';\n\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors } from './colors';\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // å¾è¡¨çç¹éï¼å®åºè¯¥æ¯æ°ç»<number []>ä»ç¨äºçº¿ï¼æ¡åé·è¾¾ï¼å¦åæ°å­[];\n  @Input() data: number[] | any[];\n  // ç¸å½äºchart.jså data: {datasets: [{...}]}\n  @Input() datasets: any[];\n  // xè½´æ ç­¾ãè¿å¯¹å¾è¡¨æ¥è¯´æ¯å¿è¦çï¼çº¿ï¼æ¡åé·è¾¾ãå¹¶ä¸åªæ¯å¾è¡¨çæ ç­¾ï¼æ¬åï¼ï¼polarAreaï¼pieådoughnut\n  @Input() labels: any[] = [];\n  // ç¸å½äºchart.jsçoption\n  @Input() options: any = {};\n  // åèæä»¶å±æ§\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  @Input() chartType: string;\n  // æ°æ®é¢è²ï¼å¦ææ²¡ææå®ï¼å°ä½¿ç¨é»è®¤å|æéæºé¢è²\n  @Input() colors: any[];\n  // æ¯å¦æ¾ç¤ºå¾ä¾\n  @Input() legend: boolean;\n\n  @Input() adding: { labels: any[], data: any[][] };\n  @Input() removing: { orientation: string };  // orientation is 'oldest' or 'latest\n  @Input() resetOption: any;\n\n  // é¼ æ ç¹å»å¾è¡¨ææçåºå\n  @Output() chartClick: EventEmitter<any> = new EventEmitter();\n  // é¼ æ æ¬æµ®å¨æ ç­¾æèæ´»è·çç¹ä¸é¢æ¶\n  @Output() chartHover: EventEmitter<any> = new EventEmitter();\n\n  public ctx: any;\n  public chart: any;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService) {\n    this.element = element;   // è·åæä»¤æå¨canvasåç´ \n  }\n\n  ngOnInit() {\n    this.ctx = this.element.nativeElement.getContext('2d'); // è·ååç´ çctx\n    this.initFlag = true; // æ¯å¦åå§åäºçæ å¿\n\n    if (this.data || this.datasets) { // å¤æ­dataådatasetsæä¸ä¸ªææ°æ®å°±å·æ°\n      this.refresh();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // TODO: æä»¶ååå·æ°ï¼å¼æ¾å·æ°æé®\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('chartType')) {\n        this.refresh();\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.removeChart(this.element.nativeElement.id);  // delete chart instance.\n      }\n    }\n  }\n\n  private refresh(): any {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n    }\n  }\n\n  private addData(labels: any[], data: any[][]) {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n  // direction is 'ildest' or 'latest'\n  private removeData(direction: string) {\n    if (direction === 'latest') {\n      this.chart.data.labels.pop();\n      this.chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n      });\n      return;\n    }\n    if (direction === 'oldest') {\n      return;\n    }\n  }\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      this.chart.data.datasets.forEach((dataset: any, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n  }\n\n  getChartBuilder(ctx: any/*, data:Array<any>, options:any*/): any {\n    const datasets: any = this.getDatasets();\n\n    const options: any = Object.assign({}, this.options); // æ·±å¤å¶options\n    if (this.legend === false) {  // è®¾ç½®optionsçlegend TODO: åç»­è¿ä¸ªå±æ§å»é¤ï¼ç´æ¥å¨optionsåè®¾ç½®\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (event: any, active: any[]) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ event, active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: any, active: any[]) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      },\n      options: options,   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // è·å chart.jsçdatasetsæ°æ®\n  private getDatasets(): any {\n    let datasets: any = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    if (this.datasets && this.datasets.length || (datasets && datasets.length)) {\n      // fix elm type, pre type is number\n      datasets = (this.datasets || datasets).map((elm: any, index: number) => {\n        const newElm: any = Object.assign({}, elm);\n        if (this.colors && this.colors.length) {\n          Object.assign(newElm, this.colors[index]);\n        } else {\n          Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n        }\n        return newElm;\n      });\n    }\n\n    if (!datasets) {\n      throw new Error(`ng-charts configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { NgChartjsService } from './ng-chartjs.service';\n\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  return new PluginConfig(plugins);\n}\n\nexport function ngChartjsDefaultPluginsFactory(): PluginConfig {\n  return new PluginConfig([]);\n}\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [\n     NgChartjsService,\n  ]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsDefaultPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsDefaultPluginToken],\n          provide: NgChartjsCustomPluginToken,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n"],"names":["Injectable","InjectionToken","Chart","Inject","forwardRef","EventEmitter","Directive","ElementRef","Input","Output","NgModule"],"mappings":"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"}