{"version":3,"sources":["ng://ng-chartjs/lib/store.service.ts","ng://ng-chartjs/lib/plugin-token.ts","ng://ng-chartjs/lib/plugins-config.ts","ng://ng-chartjs/lib/ng-chartjs.service.ts","ng://ng-chartjs/lib/colors.ts","ng://ng-chartjs/lib/ng-chartjs.directive.ts","ng://ng-chartjs/lib/ng-chartjs.module.ts"],"names":["StoreService","this","_chartInstances","_chartId","prototype","addChart","id","chart","i","length","push","removeChart","splice","getChart","Injectable","args","providedIn","NgChartjsDefaultPluginToken","InjectionToken","NgChartjsCustomPluginToken","PluginConfig","plugins","_plugins","Object","defineProperty","NgChartjsService","pluginConfig","storeService","Chart","register","decorators","type","Inject","forwardRef","DefaultColors","rgba","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","formatLineColor","colors","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatBarColor","hoverBackgroundColor","hoverBorderColor","formatPieColors","map","color","formatPolarAreaColors","getRandomColor","generateColor","index","generateColors","count","colorsArr","Array","getColors","chartType","NgChartjsDirective","element","ngChartjsService","labels","options","chartClick","EventEmitter","chartHover","initFlag","hasChanges","ngOnInit","ctx","nativeElement","getContext","data","datasets","refresh","ngOnChanges","changes","hasOwnProperty","updateChartData","currentValue","legend","previousValue","display","addData","adding","removing","orientation","removeData","assign","resetOption","update","ngOnDestroy","destroy","hasAttribute","getChartBuilder","_this","forEach","label","dataset","console","log","direction","pop","newDataValues","isArray","getDatasets","hover","onHover","event","active","emit","onClick","opts","inlinePlugins","elm","newElm","Error","Directive","selector","exportAs","ElementRef","Input","Output","ngChartjsCustomPluginsFactory","NgChartjsModule","registerPlugin","ngModule","providers","provide","useValue","deps","useFactory","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { PluginConfig } from './plugins-config';\n\nexport const NgChartjsDefaultPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Default Plugin');\n\nexport const NgChartjsCustomPluginToken: InjectionToken<PluginConfig>\n    = new InjectionToken<PluginConfig>('[ngx-chart-js] Global Custom Plugin');\n","export class PluginConfig {\n    private _plugins: any[];\n    constructor(plugins: any[] = []) {\n        this._plugins = plugins;\n    }\n\n    get plugins() {\n        return this._plugins;\n    }\n}\n","import { Injectable, Inject, forwardRef } from '@angular/core';\nimport { Chart } from 'chart.js';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    private plugins: any[];\n\n    constructor(@Inject(forwardRef(() => NgChartjsCustomPluginToken)) private pluginConfig: PluginConfig,\n    private storeService: StoreService) {\n      this.plugins = pluginConfig.plugins;\n      if (this.plugins.length !== 0 || this.plugins) {\n        for (let i = 0; i < this.plugins.length; i++) {\n          if (this.plugins[i]) {\n            Chart.plugins.register(this.plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [255, 152, 0],       // Orange\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [0, 150, 136],       // Teal\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nexport function rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nexport function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.4),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.8)\n    };\n}\n\nexport function formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.6),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 0.8),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nexport function formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' || chartType === 'doughnut') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n    return generateColor(index);\n}\n","import { StoreService } from './store.service';\nimport {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive\n} from '@angular/core';\nimport { Chart } from 'chart.js';\n\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors } from './colors';\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ng-chart-js' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // å¾è¡¨çç¹éï¼å®åºè¯¥æ¯æ°ç»<number []>ä»ç¨äºçº¿ï¼æ¡åé·è¾¾ï¼å¦åæ°å­[];\n  @Input() data: number[] | any[];\n  // ç¸å½äºchart.jså data: {datasets: [{...}]}\n  @Input() datasets: any[];\n  // xè½´æ ç­¾ãè¿å¯¹å¾è¡¨æ¥è¯´æ¯å¿è¦çï¼çº¿ï¼æ¡åé·è¾¾ãå¹¶ä¸åªæ¯å¾è¡¨çæ ç­¾ï¼æ¬åï¼ï¼polarAreaï¼pieådoughnut\n  @Input() labels: any[] = [];\n  // ç¸å½äºchart.jsçoption\n  @Input() options: any = {};\n  // åèæä»¶å±æ§\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  @Input() chartType: string;\n  // æ°æ®é¢è²ï¼å¦ææ²¡ææå®ï¼å°ä½¿ç¨é»è®¤å|æéæºé¢è²\n  @Input() colors: any[];\n  // æ¯å¦æ¾ç¤ºå¾ä¾\n  @Input() legend: boolean;\n\n  @Input() adding: { labels: any[], data: any[][] };\n  @Input() removing: { orientation: string };  // orientation is 'oldest' or 'latest\n  @Input() resetOption: any;\n\n  // é¼ æ ç¹å»å¾è¡¨ææçåºå\n  @Output() chartClick: EventEmitter<any> = new EventEmitter();\n  // é¼ æ æ¬æµ®å¨æ ç­¾æèæ´»è·çç¹ä¸é¢æ¶\n  @Output() chartHover: EventEmitter<any> = new EventEmitter();\n\n  public ctx: any;\n  public chart: any;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService) {\n    this.element = element;   // è·åæä»¤æå¨canvasåç´ \n  }\n\n  ngOnInit() {\n    this.ctx = this.element.nativeElement.getContext('2d'); // è·ååç´ çctx\n    this.initFlag = true; // æ¯å¦åå§åäºçæ å¿\n\n    if (this.data || this.datasets) { // å¤æ­dataådatasetsæä¸ä¸ªææ°æ®å°±å·æ°\n      this.refresh();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // TODO: æä»¶ååå·æ°ï¼å¼æ¾å·æ°æé®\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('chartType')) {\n        this.refresh();\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.removeChart(this.element.nativeElement.id);  // delete chart instance.\n      }\n    }\n  }\n\n  private refresh(): any {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n    }\n  }\n\n  private addData(labels: any[], data: any[][]) {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n  // direction is 'ildest' or 'latest'\n  private removeData(direction: string) {\n    if (direction === 'latest') {\n      this.chart.data.labels.pop();\n      this.chart.data.datasets.forEach((dataset) => {\n        dataset.data.pop();\n      });\n      return;\n    }\n    if (direction === 'oldest') {\n      return;\n    }\n  }\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      this.chart.data.datasets.forEach((dataset: any, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n  }\n\n  getChartBuilder(ctx: any/*, data:Array<any>, options:any*/): any {\n    const datasets: any = this.getDatasets();\n\n    const options: any = Object.assign({}, this.options); // æ·±å¤å¶options\n    if (this.legend === false) {  // è®¾ç½®optionsçlegend TODO: åç»­è¿ä¸ªå±æ§å»é¤ï¼ç´æ¥å¨optionsåè®¾ç½®\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (event: any, active: any[]) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ event, active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: any, active: any[]) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      },\n      options: options,   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // è·å chart.jsçdatasetsæ°æ®\n  private getDatasets(): any {\n    let datasets: any = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    if (this.datasets && this.datasets.length || (datasets && datasets.length)) {\n      // fix elm type, pre type is number\n      datasets = (this.datasets || datasets).map((elm: any, index: number) => {\n        const newElm: any = Object.assign({}, elm);\n        if (this.colors && this.colors.length) {\n          Object.assign(newElm, this.colors[index]);\n        } else {\n          Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n        }\n        return newElm;\n      });\n    }\n\n    if (!datasets) {\n      throw new Error(`ng-charts configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { NgChartjsService } from './ng-chartjs.service';\n\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  return new PluginConfig(plugins);\n}\n\nexport function ngChartjsDefaultPluginsFactory(): PluginConfig {\n  return new PluginConfig([]);\n}\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [\n     NgChartjsService,\n  ]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsDefaultPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsDefaultPluginToken],\n          provide: NgChartjsCustomPluginToken,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n"]}