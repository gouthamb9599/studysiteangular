/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class StoreService {
    constructor() {
        this._chartInstances = [];
        this._chartId = [];
    }
    /**
     * @param {?} id
     * @param {?} chart
     * @return {?}
     */
    addChart(id, chart) {
        for (let i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return;
            }
        }
        this._chartId.push(id);
        this._chartInstances.push(chart);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeChart(id) {
        for (let i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                this._chartId.splice(i, 1);
                this._chartInstances.splice(i, 1); // delete chart instance.
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getChart(id) {
        for (let i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return this._chartInstances[i];
            }
        }
        return null;
    }
}
StoreService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ StoreService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    StoreService.prototype._chartInstances;
    /**
     * @type {?}
     * @private
     */
    StoreService.prototype._chartId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWNoYXJ0anMvIiwic291cmNlcyI6WyJsaWIvc3RvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLM0MsTUFBTSxPQUFPLFlBQVk7SUFIekI7UUFJVSxvQkFBZSxHQUFVLEVBQUUsQ0FBQztRQUM1QixhQUFRLEdBQWEsRUFBRSxDQUFDO0tBNkJqQzs7Ozs7O0lBM0JDLFFBQVEsQ0FBQyxFQUFVLEVBQUUsS0FBVTtRQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDM0IsT0FBTzthQUNSO1NBQ0Y7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxFQUFVO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFFLHlCQUF5QjthQUM5RDtTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsRUFBVTtRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQWpDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7O0lBRUMsdUNBQW9DOzs7OztJQUNwQyxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlU2VydmljZSB7XG4gIHByaXZhdGUgX2NoYXJ0SW5zdGFuY2VzOiBhbnlbXSA9IFtdO1xuICBwcml2YXRlIF9jaGFydElkOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGFkZENoYXJ0KGlkOiBzdHJpbmcsIGNoYXJ0OiBhbnkpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYXJ0SWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5fY2hhcnRJZFtpXSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NoYXJ0SWQucHVzaChpZCk7XG4gICAgdGhpcy5fY2hhcnRJbnN0YW5jZXMucHVzaChjaGFydCk7XG4gIH1cblxuICByZW1vdmVDaGFydChpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFydElkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaWQgPT09IHRoaXMuX2NoYXJ0SWRbaV0pIHtcbiAgICAgICAgdGhpcy5fY2hhcnRJZC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHRoaXMuX2NoYXJ0SW5zdGFuY2VzLnNwbGljZShpLCAxKTsgIC8vIGRlbGV0ZSBjaGFydCBpbnN0YW5jZS5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRDaGFydChpZDogc3RyaW5nKTogYW55IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NoYXJ0SWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5fY2hhcnRJZFtpXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRJbnN0YW5jZXNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4iXX0=