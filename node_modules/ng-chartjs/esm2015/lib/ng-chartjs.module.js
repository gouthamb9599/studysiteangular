/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgChartjsDirective } from './ng-chartjs.directive';
import { NgChartjsDefaultPluginToken, NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './plugins-config';
import { NgChartjsService } from './ng-chartjs.service';
/**
 * @param {?} plugins
 * @return {?}
 */
export function ngChartjsCustomPluginsFactory(plugins) {
    return new PluginConfig(plugins);
}
/**
 * @return {?}
 */
export function ngChartjsDefaultPluginsFactory() {
    return new PluginConfig([]);
}
export class NgChartjsModule {
    /**
     * Register a plugin.
     * @param {?=} plugins
     * @return {?}
     */
    static registerPlugin(plugins = []) {
        return {
            ngModule: NgChartjsModule,
            providers: [
                {
                    provide: NgChartjsDefaultPluginToken,
                    useValue: plugins
                },
                {
                    deps: [NgChartjsDefaultPluginToken],
                    provide: NgChartjsCustomPluginToken,
                    useFactory: ngChartjsCustomPluginsFactory
                }
            ]
        };
    }
}
NgChartjsModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgChartjsDirective],
                exports: [NgChartjsDirective],
                providers: [
                    NgChartjsService,
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1jaGFydGpzLyIsInNvdXJjZXMiOlsibGliL25nLWNoYXJ0anMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBR3hELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxPQUFjO0lBQzFELE9BQU8sSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkMsQ0FBQzs7OztBQUVELE1BQU0sVUFBVSw4QkFBOEI7SUFDNUMsT0FBTyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM5QixDQUFDO0FBWUQsTUFBTSxPQUFPLGVBQWU7Ozs7OztJQUtuQixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQWlCLEVBQUU7UUFDOUMsT0FBTztZQUNMLFFBQVEsRUFBRSxlQUFlO1lBQ3pCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsMkJBQTJCO29CQUNwQyxRQUFRLEVBQUUsT0FBTztpQkFDbEI7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLENBQUMsMkJBQTJCLENBQUM7b0JBQ25DLE9BQU8sRUFBRSwwQkFBMEI7b0JBQ25DLFVBQVUsRUFBRSw2QkFBNkI7aUJBQzFDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBN0JGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsRUFDUjtnQkFDRCxZQUFZLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDbEMsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7Z0JBQzdCLFNBQVMsRUFBRTtvQkFDUixnQkFBZ0I7aUJBQ2xCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDaGFydGpzRGlyZWN0aXZlIH0gZnJvbSAnLi9uZy1jaGFydGpzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNEZWZhdWx0UGx1Z2luVG9rZW4sIE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuIH0gZnJvbSAnLi9wbHVnaW4tdG9rZW4nO1xuaW1wb3J0IHsgUGx1Z2luQ29uZmlnIH0gZnJvbSAnLi9wbHVnaW5zLWNvbmZpZyc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNTZXJ2aWNlIH0gZnJvbSAnLi9uZy1jaGFydGpzLnNlcnZpY2UnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBuZ0NoYXJ0anNDdXN0b21QbHVnaW5zRmFjdG9yeShwbHVnaW5zOiBhbnlbXSk6IFBsdWdpbkNvbmZpZyB7XG4gIHJldHVybiBuZXcgUGx1Z2luQ29uZmlnKHBsdWdpbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmdDaGFydGpzRGVmYXVsdFBsdWdpbnNGYWN0b3J5KCk6IFBsdWdpbkNvbmZpZyB7XG4gIHJldHVybiBuZXcgUGx1Z2luQ29uZmlnKFtdKTtcbn1cblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW05nQ2hhcnRqc0RpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtOZ0NoYXJ0anNEaXJlY3RpdmVdLFxuICBwcm92aWRlcnM6IFtcbiAgICAgTmdDaGFydGpzU2VydmljZSxcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ0NoYXJ0anNNb2R1bGUge1xuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqIEBwYXJhbSBwbHVnaW5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVnaXN0ZXJQbHVnaW4ocGx1Z2luczogYW55W10gPSBbXSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmdDaGFydGpzTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOZ0NoYXJ0anNEZWZhdWx0UGx1Z2luVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IHBsdWdpbnNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRlcHM6IFtOZ0NoYXJ0anNEZWZhdWx0UGx1Z2luVG9rZW5dLFxuICAgICAgICAgIHByb3ZpZGU6IE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IG5nQ2hhcnRqc0N1c3RvbVBsdWdpbnNGYWN0b3J5XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=