/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function Color() { }
if (false) {
    /** @type {?|undefined} */
    Color.prototype.backgroundColor;
    /** @type {?|undefined} */
    Color.prototype.borderWidth;
    /** @type {?|undefined} */
    Color.prototype.borderColor;
    /** @type {?|undefined} */
    Color.prototype.borderCapStyle;
    /** @type {?|undefined} */
    Color.prototype.borderDash;
    /** @type {?|undefined} */
    Color.prototype.borderDashOffset;
    /** @type {?|undefined} */
    Color.prototype.borderJoinStyle;
    /** @type {?|undefined} */
    Color.prototype.pointBorderColor;
    /** @type {?|undefined} */
    Color.prototype.pointBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.pointBorderWidth;
    /** @type {?|undefined} */
    Color.prototype.pointRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHoverRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHitRadius;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBorderColor;
    /** @type {?|undefined} */
    Color.prototype.pointHoverBorderWidth;
    /** @type {?|undefined} */
    Color.prototype.pointStyle;
    /** @type {?|undefined} */
    Color.prototype.hoverBackgroundColor;
    /** @type {?|undefined} */
    Color.prototype.hoverBorderColor;
    /** @type {?|undefined} */
    Color.prototype.hoverBorderWidth;
}
// Default colors
/** @type {?} */
export const DefaultColors = [
    [63, 81, 181],
    [255, 152, 0],
    [233, 30, 99],
    [156, 39, 176],
    [0, 188, 212],
    [3, 169, 244],
    [0, 150, 136],
    [96, 125, 139],
    [255, 193, 7],
    [37, 155, 36],
    [205, 220, 57],
    [86, 119, 252] // Blue
];
/**
 * @record
 */
export function Colors() { }
if (false) {
    /** @type {?|undefined} */
    Colors.prototype.data;
    /** @type {?|undefined} */
    Colors.prototype.label;
}
/**
 * @param {?} colour
 * @param {?} alpha
 * @return {?}
 */
export function rgba(colour, alpha) {
    return 'rgba(' + colour.concat(alpha).join(',') + ')';
}
/**
 * @param {?} min
 * @param {?} max
 * @return {?}
 */
export function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
/**
 * @param {?} colors
 * @return {?}
 */
export function formatLineColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.4),
        borderColor: rgba(colors, 1),
        pointBackgroundColor: rgba(colors, 1),
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: rgba(colors, 0.8)
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
export function formatBarColor(colors) {
    return {
        backgroundColor: rgba(colors, 0.6),
        borderColor: rgba(colors, 1),
        hoverBackgroundColor: rgba(colors, 0.8),
        hoverBorderColor: rgba(colors, 1)
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
export function formatPieColors(colors) {
    return {
        backgroundColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 0.6))),
        borderColor: colors.map((/**
         * @return {?}
         */
        () => '#fff')),
        pointBackgroundColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 1))),
        pointBorderColor: colors.map((/**
         * @return {?}
         */
        () => '#fff')),
        pointHoverBackgroundColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 1))),
        pointHoverBorderColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 1)))
    };
}
/**
 * @param {?} colors
 * @return {?}
 */
export function formatPolarAreaColors(colors) {
    return {
        backgroundColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 0.6))),
        borderColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 1))),
        hoverBackgroundColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 0.8))),
        hoverBorderColor: colors.map((/**
         * @param {?} color
         * @return {?}
         */
        (color) => rgba(color, 1)))
    };
}
/**
 * @return {?}
 */
export function getRandomColor() {
    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
}
/**
 * \@method Generate colors for line|bar charts
 * @author vincent 2019-01-22
 * @version 0.0.0
 * \@example
 * \@log 1. vincent,2019-01-22,done
 * @param {?} index he index of the default color array. eg. 0, 1
 * @return {?} number[]
 */
export function generateColor(index) {
    return DefaultColors[index] || getRandomColor();
}
/**
 * \@method Generate colors for pie|doughnut charts
 * @author vincent 2019-01-22
 * @version 0.0.0
 * \@example
 * \@log 1. vincent,2019-01-22,done
 * @param {?} count Length of data. eg. datasets.data.length
 * @return {?} number[][]
 */
export function generateColors(count) {
    /** @type {?} */
    const colorsArr = new Array(count);
    for (let i = 0; i < count; i++) {
        colorsArr[i] = DefaultColors[i] || getRandomColor();
    }
    return colorsArr;
}
/**
 * \@method Generate colors by chart type
 * @author vincent 2019-01-22
 * @version 0.0.0
 * \@example
 * \@log 1. vincent,2019-01-22,done
 * @param {?} chartType The type of chart you are using. eg. line,bar
 * @param {?} index The index of the default color array. eg. DefaultColors[index]
 * @param {?} count Length of data. eg. datasets.data.length
 * @return {?} Color or number[]
 */
export function getColors(chartType, index, count) {
    if (chartType === 'pie' || chartType === 'doughnut') {
        return formatPieColors(generateColors(count));
    }
    if (chartType === 'polarArea') {
        return formatPolarAreaColors(generateColors(count));
    }
    if (chartType === 'line' || chartType === 'radar') {
        return formatLineColor(generateColor(index));
    }
    if (chartType === 'bar' || chartType === 'horizontalBar') {
        return formatBarColor(generateColor(index));
    }
    return generateColor(index);
}
//# sourceMappingURL=data:application/json;base64,