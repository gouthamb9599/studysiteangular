/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, forwardRef } from '@angular/core';
import { Chart } from 'chart.js';
import { NgChartjsCustomPluginToken } from './plugin-token';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./plugin-token";
import * as i2 from "./store.service";
export class NgChartjsService {
    /**
     * @param {?} pluginConfig
     * @param {?} storeService
     */
    constructor(pluginConfig, storeService) {
        this.pluginConfig = pluginConfig;
        this.storeService = storeService;
        this.plugins = pluginConfig.plugins;
        if (this.plugins.length !== 0 || this.plugins) {
            for (let i = 0; i < this.plugins.length; i++) {
                if (this.plugins[i]) {
                    Chart.plugins.register(this.plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    /**
     * @param {?} id
     * @return {?}
     */
    getChart(id) {
        return this.storeService.getChart(id);
    }
}
NgChartjsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NgChartjsService.ctorParameters = () => [
    { type: PluginConfig, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => NgChartjsCustomPluginToken)),] }] },
    { type: StoreService }
];
/** @nocollapse */ NgChartjsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.NgChartjsCustomPluginToken), i0.ɵɵinject(i2.StoreService)); }, token: NgChartjsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgChartjsService.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    NgChartjsService.prototype.pluginConfig;
    /**
     * @type {?}
     * @private
     */
    NgChartjsService.prototype.storeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctY2hhcnRqcy8iLCJzb3VyY2VzIjpbImxpYi9uZy1jaGFydGpzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFLL0MsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7SUFJekIsWUFBMEUsWUFBMEIsRUFDNUYsWUFBMEI7UUFEd0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDNUYsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM1QyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekM7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsUUFBUSxDQUFDLEVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7WUFyQkosVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTFEsWUFBWSx1QkFVSixNQUFNLFNBQUMsVUFBVTs7O29CQUFDLEdBQUcsRUFBRSxDQUFDLDBCQUEwQixFQUFDO1lBVDNELFlBQVk7Ozs7Ozs7O0lBT2pCLG1DQUF1Qjs7Ozs7SUFFWCx3Q0FBd0Y7Ozs7O0lBQ3BHLHdDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2hhcnQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBOZ0NoYXJ0anNDdXN0b21QbHVnaW5Ub2tlbiB9IGZyb20gJy4vcGx1Z2luLXRva2VuJztcbmltcG9ydCB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4vcGx1Z2lucy1jb25maWcnO1xuaW1wb3J0IHsgU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzU2VydmljZSB7XG5cbiAgICBwcml2YXRlIHBsdWdpbnM6IGFueVtdO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChmb3J3YXJkUmVmKCgpID0+IE5nQ2hhcnRqc0N1c3RvbVBsdWdpblRva2VuKSkgcHJpdmF0ZSBwbHVnaW5Db25maWc6IFBsdWdpbkNvbmZpZyxcbiAgICBwcml2YXRlIHN0b3JlU2VydmljZTogU3RvcmVTZXJ2aWNlKSB7XG4gICAgICB0aGlzLnBsdWdpbnMgPSBwbHVnaW5Db25maWcucGx1Z2lucztcbiAgICAgIGlmICh0aGlzLnBsdWdpbnMubGVuZ3RoICE9PSAwIHx8IHRoaXMucGx1Z2lucykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0aGlzLnBsdWdpbnNbaV0pIHtcbiAgICAgICAgICAgIENoYXJ0LnBsdWdpbnMucmVnaXN0ZXIodGhpcy5wbHVnaW5zW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZ2V0IGNoYXJ0IGluc3RhbmNlIGJ5IGlkXG4gICAgZ2V0Q2hhcnQoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9yZVNlcnZpY2UuZ2V0Q2hhcnQoaWQpO1xuICAgIH1cbn1cbiJdfQ==